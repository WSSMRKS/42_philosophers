Program name			philo
Turn in files			Makefile, *.h, *.c, in directory philo/
Makefile				NAME, all, clean, fclean, re
Arguments				number_of_philosophers time_to_die time_to_eat
						time_to_sleep [number_of_times_each_philosopher_must_eat]
External functs.		memset, printf, malloc, free, write,
						usleep, gettimeofday, pthread_create,
						pthread_detach, pthread_join, pthread_mutex_init,
						pthread_mutex_destroy, pthread_mutex_lock,
						pthread_mutex_unlock
Libft authorized		No
Description				Philosophers with threads and mutexes


known functions:
#include <string.h>
memset:					The  memset() function fills the first n bytes of the memory area pointed
						to by s with the constant byte c.

#include <stdio.h>
printf: ✓

#include <stdlib.h>
malloc: ✓
free: ✓

#include <unistd.h>
write: ✓
usleep:					The usleep() function suspends execution of the calling thread for
						(at least) usec microseconds. The sleep may be lengthened slightly
						by any system activity or by the time spent processing the call or
						by the granularity of system timers.

#include <sys/time.h>
gettimeofday:			int gettimeofday(struct timeval *tv, struct timezone *tz);

						The functions gettimeofday() and settimeofday() can get and set the
						time as well as a timezone.

						The tv argument is a struct timeval (as specified in <sys/time.h>):
						struct timeval {
						time_t      tv_sec;     /* seconds */
						suseconds_t tv_usec;    /* microseconds */
						};
						and gives the number of seconds and microseconds since the Epoch
						(see time(2)).

						The tz argument is a struct timezone:
						struct timezone {
						int tz_minuteswest;     /* minutes west of Greenwich */
						int tz_dsttime;         /* type of DST correction */
						};
						The  use of the timezone structure is obsolete; the tz argument
						should normally be specified as NULL.  (See NOTES below.)


#include <pthread.h>
IMPORTANT: Compile and link with -pthread.
pthread_create			int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
							void *(*start_routine) (void *), void *arg);

						The pthread_create() function starts a new thread in the calling process.
						The new thread starts execution by invoking start_routine(); arg is
						passed as the sole argument of start_routine().
						The new thread terminates in one of the following ways:
						* It  calls  pthread_exit(3), specifying an exit status value that is
							available to another thread in the same process that calls pthread_join(3).
						* It returns from start_routine().  This is equivalent to calling  pthread_exit(3)
							with the value supplied in the return statement.
						* It is canceled (see pthread_cancel(3)).
						* Any  of  the threads in the process calls exit(3), or the main thread performs
						a return from main().  This causes the termination of all threads in the process.

pthread_detach			int pthread_detach(pthread_t thread);

						The pthread_detach() function marks the thread identified by thread as detached.
						When a detached thread terminates, its resources are automatically released back
						to the system without the need for another thread to join with the terminated thread.

						Attempting to detach an already detached thread results in unspecified behavior.

pthread_join			int pthread_join(pthread_t thread, void **retval);

						The pthread_join() function waits for the thread specified by thread to terminate.
						If that thread has already terminated, then pthread_join() returns immediately.
						The thread specified by thread must be joinable.

						If retval is not NULL, then pthread_join() copies the exit status of the target
						thread (i.e.m the value that ther target thread supplied to pthreadexit(3)) into
						the location pointed to by retval. If the target thread was canceled,
						then PTHREAD_CANCELED is placed in the location pointed to by retval.

						If multiple threads simyltaeously try to join with the same thread, the results
						are undefinied. If the thread calling pthread_join() is canceled, then the target
						thread will remain joinable (i.e., it will not be detached).

pthread_mutex_init		int pthread_mutex_init(pthread_mutex_t *restrict mutex,
						const pthread_mutexattr_t *restrict attr);
						pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

						see mutex_destroy

pthread_mutex_destroy	int pthread_mutex_destroy(pthread_mutex_t *mutex);

						The pthread_mutex_destroy() function shall destory the mutex object referenced by mutex;
						the mutex object becomes, in effect, uninitialized. An implementation may cuase
						pthread_mutex_destroy() to set the object referenced by mutex to an invalid value.

						A destroyed mutex object can be reainitialized using pthread_mutex_init(); the result
						of otherwise referencing the object after it has been destroyed are undefined.

						It shall be safe to destroy an initialized mutex that is unlocked. Attempting to destroy
						a locked mutex, or a mutex that another thread is attempting to lock, or a mutex that is
						being used in a pthread_cond_timedwait() or pthread_cond_wait() call by another thread,
						results in undefined behavior.

						The pthread_mutex_init() function shall initialize the mutex referenced by mutex with
						attributes specified by attr. If attr is NULL, the default mutex attributes are used;
						the effect shall be the same as passing the address of a default mutex attributes
						object. Upon successful initialization, the state of the mutex becomes initialized
						and unlocked.


pthread_mutex_lock		int pthread_mutex_lock(pthread_mutex_t *mutex);
pthread_mutex_unlock	int pthread_mutex_unlock(pthread_mutex_t *mutex);
						The mutex object referenced by mutex shall be locked by a call to
						pthread_mutex_lock() that returns zero or [EOWNERDEAD]. If the mutex is already locked
						by another thread, the calling thread shall block until the mutex becomes available.
						This operation shall return with the mutex object referenced by mutex in the locked
						state with the calling thread as its owner. If a thread attempts to relock a mutex
						that it has already locked, pthread_mutex_lock() shall behave as described in the
						Relock Column of the following table. If a thread attemts to unlock a mutex that it
						has not locked or a mutex which is unlocked, pthread_mutex_unlock() shall behave as
						described in the Unlock When Not Owner column of the following table.

						┌───────────┬────────────┬────────────────┬───────────────────────┐
						|Mutex Type │ Robustness │     Relock     │ Unlock When Not Owner │
						├───────────┼────────────┼────────────────┼───────────────────────┤
						│NORMAL     │ non-robust │ deadlock       │ undefined behavior    │
						├───────────┼────────────┼────────────────┼───────────────────────┤
						│NORMAL     │ robust     │ deadlock       │ error returned        │
						├───────────┼────────────┼────────────────┼───────────────────────┤
						│ERRORCHECK │ either     │ error returned │ error returned        │
						├───────────┼────────────┼────────────────┼───────────────────────┤
						│RECURSIVE  │ either     │ recursive      │ error returned        │
						│           │            │ (see below)    │                       │
						├───────────┼────────────┼────────────────┼───────────────────────┤
						│DEFAULT    │ non-robust │ undefined      │ undefined behavior†   │
						│           │            │ behavior†      │                       │
						├───────────┼────────────┼────────────────┼───────────────────────┤
						│DEFAULT    │ robust     │ undefined      │ error returned        │
						│           │            │ behavior†      │						  |
						└───────────┴────────────┴────────────────┴───────────────────────┘
